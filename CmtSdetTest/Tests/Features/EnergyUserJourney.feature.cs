// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("CTM energy user journey", Description="As a user of the CTM website\r\nI want to compare prices of enegy suppliers\r\nSo tha" +
        "t I can choose the best deal on my energy ", SourceFile="Features\\EnergyUserJourney.feature", SourceLine=0)]
    public partial class CTMEnergyUserJourneyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnergyUserJourney.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CTM energy user journey", "As a user of the CTM website\r\nI want to compare prices of enegy suppliers\r\nSo tha" +
                    "t I can choose the best deal on my energy ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("I have navigated to the energy supplier page of CTM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers(string supplier, string gasTariff, string howIPay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "gasUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare gas prices with a range of suppliers", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 11
 testRunner.When("I enter my supplier details as a user who wants to compare gas prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And(string.Format("I choose my supplier as {0}", supplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And(string.Format("I enter my gas energy details including my \'{0}\' and \'{1}\'", gasTariff, howIPay), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I select my preferences for a gas user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, British Gas", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_BritishGas()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("British Gas", "Fix & Fall March 2016", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, EDF Energy", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_EDFEnergy()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("EDF Energy", "Blue+Fixed Prepay February 2018", "Prepayment Meter", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, E.ON", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_E_ON()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("E.ON", "EnergyPlan Paper Billing", "Quarterly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, npower", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_Npower()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("npower", "Feel Good Fix May 2019", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, Scottish Power", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_ScottishPower()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("Scottish Power", "Standard", "Standing Order", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare gas prices with a range of suppliers, SSE", new string[] {
                "gasUserJourney"}, SourceLine=20)]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_SSE()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("SSE", "SSE 1 Year Fixed v4 Paper Billing", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment(string supplier, string electricityTariff, string howIPay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "electricUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare electricity prices with a range of tariffs and payment plan" +
                    "s (for existing payment)", @__tags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 30
  testRunner.When("I enter my supplier details as a user who wants to compare electricity prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And(string.Format("I choose my supplier as {0}", supplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And(string.Format("I enter electricty energy details including my \'{0}\' and \'{1}\'", electricityTariff, howIPay), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("I select my preferences for an electricity user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), British Gas", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_BritishGas()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("British Gas", "Standard", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), EDF Energy", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_EDFEnergy()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("EDF Energy", "Standard (Variable)", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), E.ON", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_E_ON()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("E.ON", "Fixed 1 Year", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), npower", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_Npower()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("npower", "Standard", "Prepayment Meter", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), Scottish Power", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_ScottishPower()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("Scottish Power", "Standard", "Weekly", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment), SSE", new string[] {
                "electricUserJourney"}, SourceLine=39)]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_SSE()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("SSE", "SSE 1 Year Fixed v4 Paper Billing", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement(string isOrIsNotSameSupplier, string otherSupplier, string preferredTariff, string preferredPaymentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bothUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare both gas and electricity prices for their future preferred " +
                    "payment arrangement", @__tags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 49
 testRunner.When("I enter my supplier details as a user who wants to compare both gas and electrici" +
                    "ty prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.And(string.Format("I select \'{0}\' as my supplier", otherSupplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
   testRunner.And("I enter my energy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And(string.Format("I select my preferences for my \'{0}\' and \'{1}\'", preferredTariff, preferredPaymentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement, Variant 0", new string[] {
                "bothUserJourney"}, SourceLine=58)]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant0()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("Yes", "Affect Energy", "Fixed tariff", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement, Variant 1", new string[] {
                "bothUserJourney"}, SourceLine=58)]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant1()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("No", "Sainsbury\'s Energy", "Variable tariff", "Quarterly direct debit", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement, Variant 2", new string[] {
                "bothUserJourney"}, SourceLine=58)]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant2()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("Yes", "Affect Energy", "All tariffs", "All payment types", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement, Variant 3", new string[] {
                "bothUserJourney"}, SourceLine=58)]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant3()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("No", "Sainsbury\'s Energy", "Fixed tariff", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CTMEnergyUserJourneyFeature_MsTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnergyUserJourney.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CTM energy user journey", "As a user of the CTM website\r\nI want to compare prices of enegy suppliers\r\nSo tha" +
                    "t I can choose the best deal on my energy ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CTM energy user journey")))
            {
                Tests.Features.CTMEnergyUserJourneyFeature_MsTest.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("I have navigated to the energy supplier page of CTM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers(string supplier, string gasTariff, string howIPay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "gasUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare gas prices with a range of suppliers", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 11
 testRunner.When("I enter my supplier details as a user who wants to compare gas prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.And(string.Format("I choose my supplier as {0}", supplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And(string.Format("I enter my gas energy details including my \'{0}\' and \'{1}\'", gasTariff, howIPay), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I select my preferences for a gas user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "Fix & Fall March 2016")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Monthly Direct Debit")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_BritishGas()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("British Gas", "Fix & Fall March 2016", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "Blue+Fixed Prepay February 2018")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Prepayment Meter")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_EDFEnergy()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("EDF Energy", "Blue+Fixed Prepay February 2018", "Prepayment Meter", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "EnergyPlan Paper Billing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Quarterly Direct Debit")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_E_ON()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("E.ON", "EnergyPlan Paper Billing", "Quarterly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "Feel Good Fix May 2019")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Pay On Receipt Of Bill")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_Npower()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("npower", "Feel Good Fix May 2019", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "Standard")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Standing Order")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_ScottishPower()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("Scottish Power", "Standard", "Standing Order", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare gas prices with a range of suppliers: SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gasUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:gasTariff", "SSE 1 Year Fixed v4 Paper Billing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Pay On Receipt Of Bill")]
        public virtual void UserWantsToCompareGasPricesWithARangeOfSuppliers_SSE()
        {
            this.UserWantsToCompareGasPricesWithARangeOfSuppliers("SSE", "SSE 1 Year Fixed v4 Paper Billing", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment(string supplier, string electricityTariff, string howIPay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "electricUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare electricity prices with a range of tariffs and payment plan" +
                    "s (for existing payment)", @__tags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 30
  testRunner.When("I enter my supplier details as a user who wants to compare electricity prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And(string.Format("I choose my supplier as {0}", supplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And(string.Format("I enter electricty energy details including my \'{0}\' and \'{1}\'", electricityTariff, howIPay), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("I select my preferences for an electricity user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "British Gas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "Standard")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Monthly Direct Debit")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_BritishGas()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("British Gas", "Standard", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "EDF Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "Standard (Variable)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Pay On Receipt Of Bill")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_EDFEnergy()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("EDF Energy", "Standard (Variable)", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "E.ON")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "Fixed 1 Year")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Monthly Direct Debit")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_E_ON()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("E.ON", "Fixed 1 Year", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "npower")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "Standard")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Prepayment Meter")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_Npower()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("npower", "Standard", "Prepayment Meter", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "Scottish Power")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "Standard")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Weekly")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_ScottishPower()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("Scottish Power", "Standard", "Weekly", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare electricity prices with a range of tariffs and payment plan" +
            "s (for existing payment): SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("electricUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:supplier", "SSE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:electricityTariff", "SSE 1 Year Fixed v4 Paper Billing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:howIPay", "Pay On Receipt Of Bill")]
        public virtual void UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment_SSE()
        {
            this.UserWantsToCompareElectricityPricesWithARangeOfTariffsAndPaymentPlansForExistingPayment("SSE", "SSE 1 Year Fixed v4 Paper Billing", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement(string isOrIsNotSameSupplier, string otherSupplier, string preferredTariff, string preferredPaymentType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "bothUserJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User wants to compare both gas and electricity prices for their future preferred " +
                    "payment arrangement", @__tags);
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 49
 testRunner.When("I enter my supplier details as a user who wants to compare both gas and electrici" +
                    "ty prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.And(string.Format("I select \'{0}\' as my supplier", otherSupplier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("I click Next", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
   testRunner.And("I enter my energy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And(string.Format("I select my preferences for my \'{0}\' and \'{1}\'", preferredTariff, preferredPaymentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("I click Go To Prices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("I see the lowest price output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("bothUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:isOrIsNotSameSupplier", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:otherSupplier", "Affect Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredTariff", "Fixed tariff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredPaymentType", "Monthly Direct Debit")]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant0()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("Yes", "Affect Energy", "Fixed tariff", "Monthly Direct Debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("bothUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:isOrIsNotSameSupplier", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:otherSupplier", "Sainsbury\'s Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredTariff", "Variable tariff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredPaymentType", "Quarterly direct debit")]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant1()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("No", "Sainsbury\'s Energy", "Variable tariff", "Quarterly direct debit", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("bothUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:isOrIsNotSameSupplier", "Yes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:otherSupplier", "Affect Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredTariff", "All tariffs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredPaymentType", "All payment types")]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant2()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("Yes", "Affect Energy", "All tariffs", "All payment types", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("User wants to compare both gas and electricity prices for their future preferred " +
            "payment arrangement: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CTM energy user journey")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("bothUserJourney")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:isOrIsNotSameSupplier", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:otherSupplier", "Sainsbury\'s Energy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredTariff", "Fixed tariff")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:preferredPaymentType", "Pay On Receipt Of Bill")]
        public virtual void UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement_Variant3()
        {
            this.UserWantsToCompareBothGasAndElectricityPricesForTheirFuturePreferredPaymentArrangement("No", "Sainsbury\'s Energy", "Fixed tariff", "Pay On Receipt Of Bill", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
